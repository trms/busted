nuget {
	nuspec {
		id = busted;
		title: busted;
		version: 2.0.0.8;
		authors: {coapp, Olivine Labs, Tightrope Media Systems};
		owners: {Olivine Labs};

		licenseUrl: "http://opensource.org/licenses/MIT";
		licenseUrl: "http://opensource.org/licenses/MIT";
		projectUrl: "http://olivinelabs.com/busted";
		copyright: "Copyright (c) 2012 Olivine Labs, LLC.";
		
		requireLicenseAcceptance: false;
		summary: "busted is a unit testing framework with a focus on being **easy to use**. Supports Lua >= 5.1, luajit >= 2.0.0, and moonscript.";
		releaseNotes: @"http://olivinelabs.com/busted"; 
		description: @"busted is a unit testing framework with a focus on being **easy to use**. Supports Lua >= 5.1, luajit >= 2.0.0, and moonscript.";
		tags: {native, Lua, module};
	}
	dependencies {
        // This node defines any outside items which may be needed to consume this package.
        packages : {
            // This is a list of other NuGet packages required to use this package.
            // Each item follows the format "<pkg_name>/<version>"
            lua/"[5.2, 5.4)",
			cliargs,
			luafilesystem, 
			dkjson,
			say,
			luassert,
			ansicolors,
			penlight,
			mediator_lua,
        };
    }
	files {
		// declare a lua collection
		lua : {
			// copies the whole folder tree.
			#add-all-files : Items.bustedDir;
			// set the destination in the package itself. 
			#destination : ${build_root}\busted;
		};
		
		bus : {
			// copies the whole folder tree.
			#add-all-files : Items.bustedBatchDir;
			// set the destination in the package itself. 
			#destination : ${build_root}\bustedbatchfiles;
		};
		
		lua: {".\busted\**\*.lua"};
		
		bus: .\bin\busted.bat;
    }

    targets {
		// .lua files will go in a busted\ folder
		// batch files and anything needed by the cli will go in the root
		AfterBuild {
			.Copy {
				DestinationFiles = "@(bustedDir->'$(TargetDir)lua\busted\%(RecursiveDir)%(Filename)%(Extension)')";
				SourceFiles = "@(bustedDir)";
				SkipUnchangedFiles = true;
			};
		};
		AfterBuild {
			.Copy {
				DestinationFiles = "@(bustedBatchDir->'$(TargetDir)%(RecursiveDir)%(Filename)%(Extension)')";
				SourceFiles = "@(bustedBatchDir)";
				SkipUnchangedFiles = true;
			};
		};
	}
}