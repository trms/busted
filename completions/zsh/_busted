#compdef busted
#autoload

#alias rbu="unfunction _busted; autoload -U _busted"

local _busted_args
_busted_args=(
"--cpath=[Optional path to be prefixed to the Lua C module search path (default: ./csrc/?.so;./csrc/?/?.so;)]:directory:_dirs"
"--defer-print[Defer print to when test suite is complete]"
"--lang=[Language for error messages (default: en)]:languages:(ar de en fr ja nl ru th ua zh)"
"--repeat=[Run the tests repeatedly (default: 1)]: :"
"--seed=[Random seed value to use for shuffing test order (default: os.time())]: :"
"(--randomize --shuffle)--randomize[Force randomized test order]"
"(--randomize --shuffle)--shuffle[Force randomized test order (alias for --randomize)]"
"--suppress-pending[Suppress 'pending' test output]"
"--version[Prints the program version and exits]"
"--helper[A helper script that is run before tests]:files:_files"
"--loaders=[Test file loaders]:loaders:_values -s , loaders lua moonscript terra"
"(-c --coverage)"{-c,--coverage}"[Do code coverage analysis (requires 'LuaCov' to be installed)]"
"(-d --cwd)"{-d,--cwd=}"[Path to current working directory (default: ./)]:directory:_dirs"
"(-h --help)"{-h,--help}"[Help]"
"(-m --lpath)"{-m,--lpath=}"[Optional path to be prefixed to the Lua module search path (default: ./src/?.lua;./src/?/?.lua;./src/?/init.lua)]:directory:_dirs"
"(-o --output)"{-o,--output=}"[Output library to load (default: utfTerminal)]:output handlers:->output"
"(-p --pattern)"{-p,--pattern=}"[Only run test files matching the Lua pattern (default: _spec)]: :"
"(-r --run)"{-r,--run=}"[Config to run from .busted file]:run configurations:->run"
"(-s --enable-sound)"{-s,--enable-sound}"[Executes 'say' command if available]"
"(-t --tags --exclude-tags)"{-t,--tags=}"[Only run tests with these #tags]: :"
"(-t --tags --exclude-tags)--exclude-tags=[Do not run tests with these #tags, takes precedence over --tags]: :"
"(-v --verbose)"{-v,--verbose}"[Verbose output of errors]"
"*:files:_files"
)

local curcontext="${curcontext}" state line
typeset -A opt_args

_arguments -s $_busted_args

case "${state}" in
  run)
    local d="."
    local i
    for (( i=1; i < ${#words}-1; i++ )); do
      case "${words[i]}" in
        -d|--cwd)
          d="${words[i+1]}"
          ;;
      esac
    done
    local cfgs
    cfgs=$(lua -e "cfgs=dofile('${d}/.busted')" \
                     -e "for k,_ in pairs(cfgs) do print(k) end" 2> /dev/null)
    _arguments -s "*:run configurations:(${cfgs})"
    ;;
  output)
    _alternative "*:output handlers:(plainTerminal utfTerminal TAP json junit sound)"
    _arguments -s "*:output handlers:_files -g '*.lua *.moon'"
    ;;
esac
